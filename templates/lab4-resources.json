{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Sample Template Continuous Delievery: This template builds an AWS CodePipeline pipeline that implements a continuous delivery release process for AWS CloudFormation stacks. Submit a CloudFormation source artifact to an Amazon S3 location before building the pipeline. The pipeline uses the artifact to automatically create stacks and change sets. **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used when you create a stack using this template.\n",
  "Parameters": {
    "S3Bucket": {
      "Description": "The name of the S3 bucket that contains the source artifact, which must be in the same region as this stack",
      "Type": "String"
    },
    "LambdaS3Key": {
      "Default": "codepipeline-lambda.zip",
      "Description": "The file name of the source artifact of the Lambda code, such as myfolder/myartifact.zip",
      "Type": "String"
    }
  },
  "Resources": {

    "CodePipelineLambdaRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Principal":{
                "Service":[
                  "lambda.amazonaws.com"
                ]
              },
              "Action":[
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path":"/"
      }
    },	
	"LambdaCodePipelineExecutionPolicy":{
      "DependsOn":[
        "CodePipelineLambdaRole"
      ],
      "Type":"AWS::IAM::Policy",
      "Properties":{
        "PolicyName":"LambdaRolePolicy",
        "Roles":[
          {
            "Ref":"CodePipelineLambdaRole"
          }
        ],
        "PolicyDocument":{
          "Version":"2012-10-17",
          "Statement":[
            {
              "Effect":"Allow",
              "Action":[
                "logs:*"
              ],
              "Resource":[
                "arn:aws:logs:*:*:*"
              ]
            },
            {
              "Effect":"Allow",
              "Action":[
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult",
                "s3:*",
                "ec2:*",
                "cloudformation:*"
              ],
              "Resource":[
                "*"
              ]
            },
            {
              "Effect":"Allow",
              "Action":[
                "dynamodb:*"
              ],
              "Resource":[
                "*"
              ]
            },
            {
              "Effect":"Allow",
              "Action":[
                "sns:*"
              ],
              "Resource":[
                "*"
              ]
            }				
          ]
        }
      }
    },	
    "CFNValidateLambda":{
      "Type":"AWS::Lambda::Function",
      "DependsOn":[
        "CodePipelineLambdaRole",
        "LambdaCodePipelineExecutionPolicy"
      ],
      "Properties":{
        "Code":{
          "S3Bucket":{
            "Ref":"S3Bucket"
          },
          "S3Key":{"Ref":"LambdaS3Key"}
        },
        "Role":{"Fn::GetAtt":["CodePipelineLambdaRole","Arn"]},
        "Description":"Always return success",
        "Timeout":60,
        "Handler":"cfn_validate_lambda.lambda_handler",
        "Runtime":"python2.7"
      }
    },	
    "TestStackValidationLambda":{
      "Type":"AWS::Lambda::Function",
      "DependsOn":[
        "CodePipelineLambdaRole",
        "LambdaCodePipelineExecutionPolicy"
      ],
      "Properties":{
        "Code":{
          "S3Bucket":{
            "Ref":"S3Bucket"
          },
          "S3Key":{"Ref":"LambdaS3Key"}
        },
        "Role":{"Fn::GetAtt":["CodePipelineLambdaRole","Arn"]},
        "Description":"Always return success",
        "Timeout":60,
        "Handler":"stack_validate_lambda.lambda_handler",
        "Runtime":"python2.7"
      }
    },
    "myDynamoDBTable" : {
      "Type" : "AWS::DynamoDB::Table",
      "Properties" : {
       "AttributeDefinitions" : [
          {
            "AttributeName" : "rule",
            "AttributeType" : "S"   
          }
        ],	  
        "KeySchema" : [
          {
            "AttributeName" : "rule",
            "KeyType" : "HASH"
          }
        ],
        "ProvisionedThroughput" : {
          "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5"
        },
        "TableName" : "DDBRules"
      }
    }
  },
  "Outputs" : {
    "LambdaFunction" : {
      "Description" : "Lambda Function Name",
      "Value" :  {"Ref":"CFNValidateLambda"}
    }
  }
}